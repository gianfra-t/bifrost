// This file is part of Bifrost.

// Copyright (C) Liebi Technologies PTE. LTD.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bifrost_cross_in_out
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-11-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `mjl-legion`, CPU: `12th Gen Intel(R) Core(TM) i9-12900H`
//! WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_cross_in_out
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights/bifrost_cross_in_out.rs
// --template=./weight-template/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for bifrost_cross_in_out.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> bifrost_cross_in_out::WeightInfo for BifrostWeight<T> {
	// Storage: `CrossInOut::CrossCurrencyRegistry` (r:1 w:1)
	// Proof: `CrossInOut::CrossCurrencyRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_currency_for_cross_in_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3617`
		// Minimum execution time: 6_252 nanoseconds.
		Weight::from_parts(6_517_000, 3617)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `CrossInOut::CrossingMinimumAmount` (r:0 w:1)
	// Proof: `CrossInOut::CrossingMinimumAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_crossing_minimum_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_674 nanoseconds.
		Weight::from_parts(3_835_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `CrossInOut::RegisterWhiteList` (r:1 w:1)
	// Proof: `CrossInOut::RegisterWhiteList` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_to_register_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 8_082 nanoseconds.
		Weight::from_parts(8_472_000, 3574)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `CrossInOut::RegisterWhiteList` (r:1 w:1)
	// Proof: `CrossInOut::RegisterWhiteList` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_from_register_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 7_270 nanoseconds.
		Weight::from_parts(7_585_000, 3652)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `CrossInOut::RegisterWhiteList` (r:1 w:0)
	// Proof: `CrossInOut::RegisterWhiteList` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CrossInOut::CrossCurrencyRegistry` (r:1 w:0)
	// Proof: `CrossInOut::CrossCurrencyRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CrossInOut::AccountToOuterMultilocation` (r:1 w:1)
	// Proof: `CrossInOut::AccountToOuterMultilocation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CrossInOut::OuterMultilocationToAccount` (r:0 w:1)
	// Proof: `CrossInOut::OuterMultilocationToAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_linked_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `226`
		//  Estimated: `3691`
		// Minimum execution time: 14_463 nanoseconds.
		Weight::from_parts(15_616_000, 3691)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `CrossInOut::CrossCurrencyRegistry` (r:1 w:0)
	// Proof: `CrossInOut::CrossCurrencyRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CrossInOut::CrossingMinimumAmount` (r:1 w:0)
	// Proof: `CrossInOut::CrossingMinimumAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	// Storage: `CrossInOut::AccountToOuterMultilocation` (r:1 w:0)
	// Proof: `CrossInOut::AccountToOuterMultilocation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
	fn cross_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1010`
		//  Estimated: `4475`
		// Minimum execution time: 29_635 nanoseconds.
		Weight::from_parts(31_847_000, 4475)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `CrossInOut::CrossCurrencyRegistry` (r:1 w:0)
	// Proof: `CrossInOut::CrossCurrencyRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CrossInOut::AccountToOuterMultilocation` (r:1 w:1)
	// Proof: `CrossInOut::AccountToOuterMultilocation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CrossInOut::OuterMultilocationToAccount` (r:0 w:1)
	// Proof: `CrossInOut::OuterMultilocationToAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn change_outer_linked_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `345`
		//  Estimated: `3810`
		// Minimum execution time: 14_130 nanoseconds.
		Weight::from_parts(14_534_000, 3810)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
