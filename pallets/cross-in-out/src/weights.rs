// This file is part of Bifrost.

// Copyright (C) Liebi Technologies PTE. LTD.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bifrost_cross_in_out
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-11-26, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `mjl-legion`, CPU: `12th Gen Intel(R) Core(TM) i9-12900H`
//! WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_cross_in_out
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/cross-in-out/src/weights.rs
// --template=./weight-template/pallet-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for bifrost_cross_in_out.
pub trait WeightInfo {
	fn deregister_currency_for_cross_in_out() -> Weight;
	fn set_crossing_minimum_amount() -> Weight;
	fn add_to_register_whitelist() -> Weight;
	fn remove_from_register_whitelist() -> Weight;
	fn register_linked_account() -> Weight;
	fn cross_out() -> Weight;
	fn change_outer_linked_account() -> Weight;
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `CrossInOut::CrossCurrencyRegistry` (r:1 w:1)
	/// Proof: `CrossInOut::CrossCurrencyRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_currency_for_cross_in_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3617`
		// Minimum execution time: 12_600_000 picoseconds.
		Weight::from_parts(13_724_000, 3617)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CrossInOut::CrossingMinimumAmount` (r:0 w:1)
	/// Proof: `CrossInOut::CrossingMinimumAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_crossing_minimum_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_367_000 picoseconds.
		Weight::from_parts(9_335_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CrossInOut::RegisterWhiteList` (r:1 w:1)
	/// Proof: `CrossInOut::RegisterWhiteList` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_to_register_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 16_483_000 picoseconds.
		Weight::from_parts(18_335_000, 3574)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CrossInOut::RegisterWhiteList` (r:1 w:1)
	/// Proof: `CrossInOut::RegisterWhiteList` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_from_register_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 13_204_000 picoseconds.
		Weight::from_parts(14_958_000, 3652)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CrossInOut::RegisterWhiteList` (r:1 w:0)
	/// Proof: `CrossInOut::RegisterWhiteList` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrossInOut::CrossCurrencyRegistry` (r:1 w:0)
	/// Proof: `CrossInOut::CrossCurrencyRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrossInOut::AccountToOuterMultilocation` (r:1 w:1)
	/// Proof: `CrossInOut::AccountToOuterMultilocation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrossInOut::OuterMultilocationToAccount` (r:0 w:1)
	/// Proof: `CrossInOut::OuterMultilocationToAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_linked_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `226`
		//  Estimated: `3691`
		// Minimum execution time: 24_918_000 picoseconds.
		Weight::from_parts(28_149_000, 3691)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CrossInOut::CrossCurrencyRegistry` (r:1 w:0)
	/// Proof: `CrossInOut::CrossCurrencyRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrossInOut::CrossingMinimumAmount` (r:1 w:0)
	/// Proof: `CrossInOut::CrossingMinimumAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `CrossInOut::AccountToOuterMultilocation` (r:1 w:0)
	/// Proof: `CrossInOut::AccountToOuterMultilocation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	/// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
	fn cross_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1010`
		//  Estimated: `4475`
		// Minimum execution time: 37_734_000 picoseconds.
		Weight::from_parts(61_399_000, 4475)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CrossInOut::CrossCurrencyRegistry` (r:1 w:0)
	/// Proof: `CrossInOut::CrossCurrencyRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrossInOut::AccountToOuterMultilocation` (r:1 w:1)
	/// Proof: `CrossInOut::AccountToOuterMultilocation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrossInOut::OuterMultilocationToAccount` (r:0 w:1)
	/// Proof: `CrossInOut::OuterMultilocationToAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn change_outer_linked_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `345`
		//  Estimated: `3810`
		// Minimum execution time: 21_855_000 picoseconds.
		Weight::from_parts(26_017_000, 3810)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
