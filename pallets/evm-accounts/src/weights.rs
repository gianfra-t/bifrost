// This file is part of HydraDX.

// Copyright (C) 2020-2024  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_evm_accounts`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-21, STEPS: `10`, REPEAT: `30`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-bot`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=30
// --wasm-execution=compiled
// --heap-pages=4096
// --template=.maintain/pallet-weight-template-no-back.hbs
// --pallet=pallet-evm-accounts
// --output=weights-1.1.0/evm-accounts.rs
// --extrinsic=*

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn bind_evm_address() -> Weight;
	fn add_contract_deployer() -> Weight;
	fn remove_contract_deployer() -> Weight;
	fn renounce_contract_deployer() -> Weight;
}

pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	/// Storage: `EVMAccounts::AccountExtension` (r:1 w:1)
	/// Proof: `EVMAccounts::AccountExtension` (`max_values`: None, `max_size`: Some(48), added:
	/// 2523, mode: `MaxEncodedLen`) Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode:
	/// `MaxEncodedLen`) Storage: `AssetRegistry::NextAssetId` (r:1 w:0)
	/// Proof: `AssetRegistry::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499,
	/// mode: `MaxEncodedLen`) Storage: `AssetRegistry::LocationAssets` (r:1 w:0)
	/// Proof: `AssetRegistry::LocationAssets` (`max_values`: None, `max_size`: Some(622), added:
	/// 3097, mode: `MaxEncodedLen`) Storage: `Tokens::Accounts` (r:1 w:0)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode:
	/// `MaxEncodedLen`)
	fn bind_evm_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `479`
		//  Estimated: `4087`
		// Minimum execution time: 36_357_000 picoseconds.
		Weight::from_parts(36_601_000, 4087)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EVMAccounts::ContractDeployer` (r:0 w:1)
	/// Proof: `EVMAccounts::ContractDeployer` (`max_values`: None, `max_size`: Some(36), added:
	/// 2511, mode: `MaxEncodedLen`)
	fn add_contract_deployer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_157_000 picoseconds.
		Weight::from_parts(13_481_000, 0).saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EVMAccounts::ContractDeployer` (r:0 w:1)
	/// Proof: `EVMAccounts::ContractDeployer` (`max_values`: None, `max_size`: Some(36), added:
	/// 2511, mode: `MaxEncodedLen`)
	fn remove_contract_deployer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_196_000 picoseconds.
		Weight::from_parts(13_517_000, 0).saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EVMAccounts::ContractDeployer` (r:0 w:1)
	/// Proof: `EVMAccounts::ContractDeployer` (`max_values`: None, `max_size`: Some(36), added:
	/// 2511, mode: `MaxEncodedLen`)
	fn renounce_contract_deployer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_153_000 picoseconds.
		Weight::from_parts(13_380_000, 0).saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `EVMAccounts::AccountExtension` (r:1 w:1)
	/// Proof: `EVMAccounts::AccountExtension` (`max_values`: None, `max_size`: Some(48), added:
	/// 2523, mode: `MaxEncodedLen`) Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode:
	/// `MaxEncodedLen`) Storage: `AssetRegistry::NextAssetId` (r:1 w:0)
	/// Proof: `AssetRegistry::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499,
	/// mode: `MaxEncodedLen`) Storage: `AssetRegistry::LocationAssets` (r:1 w:0)
	/// Proof: `AssetRegistry::LocationAssets` (`max_values`: None, `max_size`: Some(622), added:
	/// 3097, mode: `MaxEncodedLen`) Storage: `Tokens::Accounts` (r:1 w:0)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode:
	/// `MaxEncodedLen`)
	fn bind_evm_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `479`
		//  Estimated: `4087`
		// Minimum execution time: 36_357_000 picoseconds.
		Weight::from_parts(36_601_000, 4087)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `EVMAccounts::ContractDeployer` (r:0 w:1)
	/// Proof: `EVMAccounts::ContractDeployer` (`max_values`: None, `max_size`: Some(36), added:
	/// 2511, mode: `MaxEncodedLen`)
	fn add_contract_deployer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_157_000 picoseconds.
		Weight::from_parts(13_481_000, 0).saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `EVMAccounts::ContractDeployer` (r:0 w:1)
	/// Proof: `EVMAccounts::ContractDeployer` (`max_values`: None, `max_size`: Some(36), added:
	/// 2511, mode: `MaxEncodedLen`)
	fn remove_contract_deployer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_196_000 picoseconds.
		Weight::from_parts(13_517_000, 0).saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `EVMAccounts::ContractDeployer` (r:0 w:1)
	/// Proof: `EVMAccounts::ContractDeployer` (`max_values`: None, `max_size`: Some(36), added:
	/// 2511, mode: `MaxEncodedLen`)
	fn renounce_contract_deployer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_153_000 picoseconds.
		Weight::from_parts(13_380_000, 0).saturating_add(RocksDbWeight::get().writes(1))
	}
}
